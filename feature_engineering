
import numpy as np
import pandas as pd
import seaborn as sns

from matplotlib import pyplot as plt

import missingno as msno
from datetime import date

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler


pd.set_option('display.max_columns',None)
pd.set_option('display.max_rows',None)
pd.set_option('display.float_format',lambda x : '%.3f' % x)
pd.set_option('display.width',500)


def load_application_train():
    data = pd.read_csv("application_train.csv")
    return data


df = load_application_train()
df.head()


def load():
    data = pd.read_csv("titanic.csv")
    return data


df = load()

df.head()



#Aykırı değerleri yakalama
sns.boxplot(x=df["Age"])

plt.show()

#Nasıl yakalanır ?


#aykırı değerleri yakalamaya çalışalım
#1. çeyrekler için 25% lik çeyreği getir
q1 = df["Age"].quantile(0.25)
#3. çeyrekler için 75% lik çeyreği getir
q3 = df["Age"].quantile(0.75)


#iqr hesapla
iqr = q3-q1


#üst ve alt sınırları bulalım.
up = q3 + iqr*1.5
down = q1 - iqr*1.5


#aykırı değerleri getir..
df[ (df["Age"] <down)  | (df["Age"] > up )]

 #indexleri
df[ (df["Age"] <down)  | (df["Age"] > up )].index


#aykırı değer var mı yok mu ? Varsa True dönsün yoksa False
df[ (df["Age"] <down)  | (df["Age"] > up )].any(axis=None)
#bunun dışındakileri getir..
df[(df["Age"] <down)].any(axis=None) # down değerli yaş aralığı yoktur. ( -6 değerinden dolayı  )


#aykırı değerleri yakalama outlier_threshoud()
def outlier_threshoulds(dataframe, col_name, q1 = 0.25,q3 =0.75):
        quartile1 = dataframe[col_name].quantile(q1)
        quartile3 = dataframe[col_name].quantile(q3)
        interquantile_range = quartile3 - quartile1
        up_limit =  quartile3 + interquantile_range* 1.5
        low_limit =  quartile1 - interquantile_range* 1.5
        return low_limit,up_limit


outlier_threshoulds(df,"Age")

low,up = outlier_threshoulds(df,"Age")


def check_outlier(dataframe,col_name):
    low_limit,up_limit = outlier_threshoulds(dataframe,col_name)
    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):
        return True
    else:
        return False


check_outlier(df,"Age")
