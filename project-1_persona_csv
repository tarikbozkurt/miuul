import pandas as pd
import seaborn as sns

df = pd.read_csv("https://raw.githubusercontent.com/brktlhylmz/Miuul-Yaz-Kampi/main/persona.csv")

df.info()

#GOREV-1

#soru-2 Kaç unique SOURCE vardır ? Frekansları nedir ?
print(df['SOURCE'].unique())
print(df['SOURCE'].nunique())
print(df['SOURCE'].value_counts())

#soru3 kaç unique PRICE vardır.
print(df['PRICE'].nunique())

#soru4 Hangi PRICE'dan kaçar tane satış gerçekleşmiş?
print(df['PRICE'].value_counts())

#soru5 Hangi ülkeden kaçar tane satış olmuş
print(df['COUNTRY'].value_counts())

#soru6 Ülkelere göre satışlardan toplam ne kadar kazanılmış ?
print(df['COUNTRY'].value_counts().sum())

#soru7 SOURCE türlerine göre satış sayıları nedir?
print(df["SOURCE"].value_counts())

#-------
#sürekli yazmak yerine agg_list üzerinden çekebiliriz..

agg_list=['mean','max','min','sum']
#------

#soru8 Ülkelere göre PRICE ortalamaları nedir ?
print(df.groupby('COUNTRY').agg({'PRICE':agg_list}))
print(df.groupby("COUNTRY")["PRICE"].mean())

#soru9 SOURCE'lara göre PRICE ortalamaları nedir ?
print(df.groupby('SOURCE').agg({'PRICE':agg_list}))
print(df.groupby("SOURCE")["PRICE"].mean())


#soru10 COUNTRY-SOURCE kırılımında PRICE ortalamaları nedir?
print(df.groupby(["COUNTRY","SOURCE"]).agg({'PRICE':agg_list}))

#GOREV-2
print(df.groupby(["COUNTRY","SOURCE","SEX","AGE"]).agg({'PRICE':'mean'}))

#GÖREV-3
#Önceki sorudaki çıktıyı daha iyi görebilmek için sort_values metodunu azalan olacak şekilde PRICE’a göre uygulayınız.
#Çıktıyı agg_df olarak kaydediniz.
agg_df= df.groupby(["COUNTRY","SOURCE","SEX","AGE"]).agg({'PRICE':'mean'})
#Series yapısı olduğu için agg_df içerisine aldık burada "sort_values" series ler üzerine yapılamıyor..
#ascending kullandık.. ifadelerin küçükten büyüğe sıralanması için..
agg_df= agg_df.sort_values("PRICE",ascending=False)


#GÖREV-4 Indekste yer alan isimleri değişken ismine çeviriniz
#• Üçüncü sorunun çıktısında yer alan PRICE dışındaki tüm değişkenler index isimleridir. Bu isimleri değişken isimlerine çeviriniz.
agg_df=agg_df.reset_index()
#GÖREV-5
#Age değişkenini kategorik değişkene çeviriniz ve agg_df’e ekleyiniz.
# Age sayısal değişkenini kategorik değişkene çeviriniz.
# Aralıkları ikna edici şekilde oluşturunuz.
# Örneğin: ‘0_18', ‘19_23', '24_30', '31_40', '41_70
def int_to_cat(x):

    if 0<=x and x<=18:
        return "0_18"
    elif 19<=x and x<=23:
        return "19_23"

    elif 24<=x and x<=30:
        return "24_30"

    elif 31<=x and x<=40:
        return "31_40"

    elif 41<=x and x<=70:
        return "41_70"
    else:
        return "70+"


agg_df["AGE_CAT"] = agg_df["AGE"].apply(lambda x: int_to_cat(x))
agg_df.head(20)

#GOREV-6  Yeni seviye tabanlı müşterileri (persona) tanımlayınız
#Yeni seviye tabanlı müşterileri (persona) tanımlayınız ve veri setine değişken olarak ekleyiniz.
# Yeni eklenecek değişkenin adı: customers_level_based
# Önceki soruda elde edeceğiniz çıktıdaki gözlemleri bir araya getirerek customers_level_based değişkenini oluşturmanız gerekmektedir.
agg_df['customer_level_based'] = [country.upper()+'_' + source.upper()+'_'+sex.upper()+'_'+age.upper() for country,source,sex,age in zip(agg_df['COUNTRY'],agg_df['SOURCE'],agg_df['SEX'],agg_df['AGE_CAT'])]
agg_df.groupby('customer_level_based').agg({'PRICE':agg_list})
agg_df = agg_df.reset_index()

#GÖREV-7
#: Yeni müşterileri (personaları) segmentlere ayırınız.
# Yeni müşterileri (Örnek: USA_ANDROID_MALE_0_18) PRICE’a göre 4 segmente ayırınız.
# Segmentleri SEGMENT isimlendirmesi ile değişken olarak agg_df’e ekleyiniz.
# Segmentleri betimleyiniz (Segmentlere göre group by yapıp price mean, max, sum’larını alınız).
agg_df["SEGMENT"] = pd.qcut(agg_df["PRICE"],4,labels=["D","C","B","A"])
agg_df.groupby(['SEGMENT']).agg({'PRICE':agg_list})

#GÖREV-8 Yeni gelen müşterileri sınıflandırıp, ne kadar gelir getirebileceklerini tahmin ediniz
#• 33 yaşında ANDROID kullanan bir Türk kadını hangi segmente aittir ve ortalama ne kadar gelir kazandırması beklenir?
# 35 yaşında IOS kullanan bir Fransız kadını hangi segmente aittir ve ortalama ne kadar gelir kazandırması beklenir?

def calculate_income_AI(welcome_user):
    return "{} sekmentine ait ve \n {} kazandırması bekleniyor".format(agg_df[agg_df['customer_level_based'] == welcome_user]["SEGMENT"],agg_df[agg_df["customer_level_based"] == welcome_user]["PRICE"])

user_1 ="TUR_ANDROID_FEMALE_31_40"
calculate_income_AI(user_1)

user_2 = "FRA_ANDROID_FEMALE_31_40"
calculate_income_AI(user_2)

